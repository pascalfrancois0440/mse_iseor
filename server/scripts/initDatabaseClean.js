const { sequelize } = require('../config/database');
const { User, Entretien, Dysfonctionnement, ReferentielIseor } = require('../models');
const bcrypt = require('bcryptjs');

// Donn√©es du r√©f√©rentiel ISEOR (version simplifi√©e)
const referentielData = [
  // Domaine 1: Conditions de travail
  {
    code: '101',
    domaine: 1,
    titre: 'S√©curit√© et hygi√®ne',
    description: 'Conditions de s√©curit√© et d\'hygi√®ne au travail',
    sous_themes: ['Accidents du travail', 'Maladies professionnelles'],
    exemples: ['Accidents de manutention', 'Troubles musculo-squelettiques'],
    questions_guides: ['Y a-t-il des accidents r√©currents ?'],
    indicateurs_defaut: ['accidents'],
    composants_defaut: ['surrtemps', 'non_production'],
    ordre_affichage: 1
  },
  {
    code: '201',
    domaine: 2,
    titre: 'R√©partition des t√¢ches',
    description: 'Organisation et r√©partition du travail entre les personnes',
    sous_themes: ['Charge de travail', 'Polyvalence'],
    exemples: ['Surcharge ponctuelle', 'Sous-charge chronique'],
    questions_guides: ['La charge est-elle √©quilibr√©e ?'],
    indicateurs_defaut: ['ecarts', 'rotation'],
    composants_defaut: ['surrtemps', 'non_production'],
    ordre_affichage: 1
  },
  {
    code: '301',
    domaine: 3,
    titre: 'Communication verticale',
    description: 'Communication entre les niveaux hi√©rarchiques',
    sous_themes: ['Remont√©e d\'information', 'Directives'],
    exemples: ['Informations non transmises', 'Consignes floues'],
    questions_guides: ['L\'information circule-t-elle bien ?'],
    indicateurs_defaut: ['defauts', 'ecarts'],
    composants_defaut: ['surrtemps', 'non_production'],
    ordre_affichage: 1
  }
];

async function initializeDatabase() {
  try {
    console.log('üîÑ Initialisation propre de la base de donn√©es...');

    // Forcer la recr√©ation compl√®te des tables
    await sequelize.sync({ force: true });
    console.log('‚úÖ Tables cr√©√©es avec succ√®s');

    // Cr√©er l'utilisateur administrateur
    console.log('üë§ Cr√©ation de l\'administrateur...');
    const adminPassword = await bcrypt.hash('Admin123!', 12);
    const admin = await User.create({
      email: 'admin@mse-diagnostic.fr',
      password: adminPassword,
      nom: 'Administrateur',
      prenom: 'MSE',
      role: 'administrateur',
      organisation: 'MSE Consulting',
      actif: true,
      provider: 'local'
    });
    console.log('‚úÖ Administrateur cr√©√©:', admin.email);

    // V√©rifier imm√©diatement le mot de passe
    const passwordCheck = await admin.verifierMotDePasse('Admin123!');
    console.log('üîê V√©rification mot de passe admin:', passwordCheck ? '‚úÖ OK' : '‚ùå ERREUR');

    // Cr√©er l'utilisateur consultant
    console.log('üë§ Cr√©ation du consultant...');
    const consultantPassword = await bcrypt.hash('Consultant123!', 12);
    const consultant = await User.create({
      email: 'consultant@mse-diagnostic.fr',
      password: consultantPassword,
      nom: 'Dupont',
      prenom: 'Jean',
      role: 'consultant',
      organisation: 'MSE Consulting',
      telephone: '+33 1 23 45 67 89',
      actif: true,
      provider: 'local'
    });
    console.log('‚úÖ Consultant cr√©√©:', consultant.email);

    // V√©rifier imm√©diatement le mot de passe
    const consultantPasswordCheck = await consultant.verifierMotDePasse('Consultant123!');
    console.log('üîê V√©rification mot de passe consultant:', consultantPasswordCheck ? '‚úÖ OK' : '‚ùå ERREUR');

    // Ins√©rer le r√©f√©rentiel ISEOR
    console.log('üìö Insertion du r√©f√©rentiel ISEOR...');
    await ReferentielIseor.bulkCreate(referentielData);
    console.log('‚úÖ R√©f√©rentiel ISEOR initialis√©');

    // Cr√©er un entretien de d√©monstration
    console.log('üìã Cr√©ation de l\'entretien de d√©monstration...');
    const entretienDemo = await Entretien.create({
      user_id: consultant.id,
      titre: 'Diagnostic MSE - Service Production',
      entreprise: 'Entreprise Exemple SA',
      secteur_activite: 'Industrie automobile',
      date_entretien: new Date(),
      duree_prevue: 90,
      statut: 'en_cours',
      ca_perimetre: 5000000,
      marge_brute: 25,
      heures_travaillees: 1600,
      effectif: 50,
      notes_preparation: 'Entretien de d√©monstration pour pr√©senter les fonctionnalit√©s de l\'application MSE Diagnostic.'
    });
    console.log('‚úÖ Entretien de d√©monstration cr√©√©');

    // Cr√©er quelques dysfonctionnements de d√©monstration
    console.log('‚ö†Ô∏è Cr√©ation des dysfonctionnements de d√©monstration...');
    const dysfonctionnementsDemo = [
      {
        entretien_id: entretienDemo.id,
        description: 'Pannes r√©currentes sur la ligne de production principale',
        frequence: 'hebdomadaire',
        temps_par_occurrence: 120,
        personnes_impactees: 8,
        cout_direct: 500,
        domaine_iseor: 1,
        indicateur_defauts: true,
        indicateur_ecarts: true,
        composant_surrtemps: true,
        composant_non_production: true,
        priorite: 'haute',
        mode_saisie: 'libre'
      },
      {
        entretien_id: entretienDemo.id,
        description: 'Manque de communication entre √©quipes',
        frequence: 'quotidien',
        temps_par_occurrence: 30,
        personnes_impactees: 5,
        cout_direct: 0,
        domaine_iseor: 3,
        indicateur_ecarts: true,
        composant_surrtemps: true,
        composant_non_production: true,
        priorite: 'moyenne',
        mode_saisie: 'guide'
      }
    ];

    await Dysfonctionnement.bulkCreate(dysfonctionnementsDemo);
    console.log('‚úÖ Dysfonctionnements de d√©monstration cr√©√©s');

    // V√©rification finale
    console.log('\nüîç V√©rification finale...');
    const userCount = await User.count();
    const adminUser = await User.findOne({ where: { email: 'admin@mse-diagnostic.fr' } });
    const consultantUser = await User.findOne({ where: { email: 'consultant@mse-diagnostic.fr' } });

    console.log(`üìä Nombre d'utilisateurs: ${userCount}`);
    console.log(`üë§ Admin trouv√©: ${adminUser ? '‚úÖ' : '‚ùå'}`);
    console.log(`üë§ Consultant trouv√©: ${consultantUser ? '‚úÖ' : '‚ùå'}`);

    if (adminUser) {
      const adminPasswordTest = await adminUser.verifierMotDePasse('Admin123!');
      console.log(`üîê Test mot de passe admin: ${adminPasswordTest ? '‚úÖ OK' : '‚ùå ERREUR'}`);
    }

    if (consultantUser) {
      const consultantPasswordTest = await consultantUser.verifierMotDePasse('Consultant123!');
      console.log(`üîê Test mot de passe consultant: ${consultantPasswordTest ? '‚úÖ OK' : '‚ùå ERREUR'}`);
    }

    console.log('\nüéâ Base de donn√©es initialis√©e avec succ√®s !');
    console.log('\nüìã Comptes cr√©√©s :');
    console.log('üë§ Administrateur : admin@mse-diagnostic.fr / Admin123!');
    console.log('üë§ Consultant : consultant@mse-diagnostic.fr / Consultant123!');
    console.log('\nüìä Donn√©es de d√©monstration :');
    console.log('‚Ä¢ R√©f√©rentiel ISEOR (3 √©l√©ments de base)');
    console.log('‚Ä¢ 1 entretien de d√©monstration');
    console.log('‚Ä¢ 2 dysfonctionnements exemples');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation :', error);
    throw error;
  }
}

// Ex√©cuter l'initialisation si ce script est appel√© directement
if (require.main === module) {
  initializeDatabase()
    .then(() => {
      console.log('\n‚úÖ Initialisation termin√©e');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå √âchec de l\'initialisation :', error);
      process.exit(1);
    });
}

module.exports = { initializeDatabase };
