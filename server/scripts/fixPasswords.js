const { sequelize } = require('../config/database');
const { User } = require('../models');
const bcrypt = require('bcryptjs');

async function fixPasswords() {
  try {
    console.log('üîß Correction des mots de passe...\n');

    // V√©rifier la connexion √† la base de donn√©es
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');

    // Corriger le mot de passe administrateur
    console.log('\n1Ô∏è‚É£ Correction administrateur...');
    const admin = await User.findOne({ where: { email: 'admin@mse-diagnostic.fr' } });
    
    if (admin) {
      // Cr√©er un nouveau hash directement
      const adminPassword = 'Admin123!';
      const adminHash = await bcrypt.hash(adminPassword, 12);
      
      console.log(`   Nouveau hash g√©n√©r√©: ${adminHash.substring(0, 20)}...`);
      
      // Mettre √† jour directement dans la base
      await sequelize.query(
        'UPDATE users SET password = ? WHERE email = ?',
        {
          replacements: [adminHash, 'admin@mse-diagnostic.fr'],
          type: sequelize.QueryTypes.UPDATE
        }
      );
      
      console.log('‚úÖ Mot de passe administrateur mis √† jour');
      
      // Recharger et tester
      await admin.reload();
      const testAdmin = await bcrypt.compare(adminPassword, adminHash);
      console.log(`   Test direct: ${testAdmin ? '‚úÖ OK' : '‚ùå ERREUR'}`);
      
      const testAdminModel = await admin.verifierMotDePasse(adminPassword);
      console.log(`   Test mod√®le: ${testAdminModel ? '‚úÖ OK' : '‚ùå ERREUR'}`);
    }

    // Corriger le mot de passe consultant
    console.log('\n2Ô∏è‚É£ Correction consultant...');
    const consultant = await User.findOne({ where: { email: 'consultant@mse-diagnostic.fr' } });
    
    if (consultant) {
      // Cr√©er un nouveau hash directement
      const consultantPassword = 'Consultant123!';
      const consultantHash = await bcrypt.hash(consultantPassword, 12);
      
      console.log(`   Nouveau hash g√©n√©r√©: ${consultantHash.substring(0, 20)}...`);
      
      // Mettre √† jour directement dans la base
      await sequelize.query(
        'UPDATE users SET password = ? WHERE email = ?',
        {
          replacements: [consultantHash, 'consultant@mse-diagnostic.fr'],
          type: sequelize.QueryTypes.UPDATE
        }
      );
      
      console.log('‚úÖ Mot de passe consultant mis √† jour');
      
      // Recharger et tester
      await consultant.reload();
      const testConsultant = await bcrypt.compare(consultantPassword, consultantHash);
      console.log(`   Test direct: ${testConsultant ? '‚úÖ OK' : '‚ùå ERREUR'}`);
      
      const testConsultantModel = await consultant.verifierMotDePasse(consultantPassword);
      console.log(`   Test mod√®le: ${testConsultantModel ? '‚úÖ OK' : '‚ùå ERREUR'}`);
    }

    // Test final de connexion
    console.log('\n3Ô∏è‚É£ Test final de connexion...');
    
    const finalTestAdmin = await User.findOne({ where: { email: 'admin@mse-diagnostic.fr' } });
    const finalTestConsultant = await User.findOne({ where: { email: 'consultant@mse-diagnostic.fr' } });
    
    if (finalTestAdmin) {
      const adminLoginTest = await finalTestAdmin.verifierMotDePasse('Admin123!');
      console.log(`   Admin login: ${adminLoginTest ? '‚úÖ FONCTIONNE' : '‚ùå ERREUR'}`);
    }
    
    if (finalTestConsultant) {
      const consultantLoginTest = await finalTestConsultant.verifierMotDePasse('Consultant123!');
      console.log(`   Consultant login: ${consultantLoginTest ? '‚úÖ FONCTIONNE' : '‚ùå ERREUR'}`);
    }

    console.log('\nüéâ Correction termin√©e !');
    console.log('\nüìã Comptes de connexion :');
    console.log('üë§ Administrateur : admin@mse-diagnostic.fr / Admin123!');
    console.log('üë§ Consultant : consultant@mse-diagnostic.fr / Consultant123!');
    console.log('\nüîê Les mots de passe ont √©t√© corrig√©s et test√©s avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction :', error);
  } finally {
    await sequelize.close();
  }
}

// Ex√©cuter la correction
fixPasswords();
